---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Card } from '../../components/Card.astro';

// Get all projects from the content collection
const projects = (await getCollection('projects'))
  .sort((a, b) => {
    const dateA = a.data.startDate ? new Date(a.data.startDate).getTime() : 0;
    const dateB = b.data.startDate ? new Date(b.data.startDate).getTime() : 0;
    return dateB - dateA; // Sort by most recent first
  });

// Get unique tags for filtering
const allTags = Array.from(new Set(projects.flatMap(project => project.data.tags || [])));

// Function to get the first image from project content
const getFirstImageUrl = (content) => {
  const imgMatch = content.match(/!\[.*?\]\((.*?)\)/);
  return imgMatch ? imgMatch[1] : null;
};

// Function to get excerpt from content
const getExcerpt = (content, maxLength = 120) => {
  // Remove markdown images and headings
  const text = content
    .replace(/!\[.*?\]\(.*?\)/g, '')
    .replace(/^#+.*$/gm, '')
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    .replace(/\*\*([^*]+)\*\*/g, '$1')
    .trim();
  
  if (text.length <= maxLength) return text;
  return text.substring(0, text.lastIndexOf(' ', maxLength)) + '...';
};
---

<Layout 
  title="Our Projects" 
  description="Explore our portfolio of innovative GIS and spatial analysis projects that demonstrate our expertise in geospatial technologies."
>
  <div class="container mx-auto px-4 py-12">
    {/* Hero Section */}
    <div class="text-center mb-16">
      <h1 class="text-4xl md:text-5xl font-bold text-foreground mb-4">
        Our Projects
      </h1>
      <p class="text-xl text-muted-foreground max-w-3xl mx-auto">
        Discover how we're applying GIS, spatial analysis, and geospatial technologies to solve complex real-world challenges.
      </p>
    </div>

    {/* Tags Filter */}
    {allTags.length > 0 && (
      <div class="mb-12">
        <div class="flex flex-wrap justify-center gap-2">
          <button 
            class="px-4 py-2 rounded-full text-sm font-medium bg-primary text-primary-foreground hover:bg-primary/90 transition-colors"
            data-filter="all"
          >
            All Projects
          </button>
          {allTags.map((tag, index) => (
            <button 
              key={index}
              class="px-4 py-2 rounded-full text-sm font-medium bg-muted hover:bg-muted/80 transition-colors"
              data-filter={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    )}

    {/* Projects Grid */}
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3" id="projects-container">
      {projects.map(project => {
        const slug = project.slug || project.id.replace(/\.[^/.]+$/, '');
        const excerpt = getExcerpt(project.body);
        const imageUrl = project.data.image || getFirstImageUrl(project.body);
        
        return (
          <article 
            class="group relative flex flex-col overflow-hidden rounded-lg border border-border bg-card text-card-foreground shadow-sm transition-all hover:shadow-md"
            data-tags={project.data.tags?.join(' ')}
          >
            {imageUrl && (
              <div class="aspect-video overflow-hidden">
                <img 
                  src={imageUrl} 
                  alt={project.data.title}
                  class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
                />
              </div>
            )}
            <div class="flex-1 p-6 flex flex-col">
              <div class="mb-2 flex flex-wrap gap-2">
                {project.data.tags?.map(tag => (
                  <span class="inline-flex items-center rounded-full bg-primary/10 px-2.5 py-0.5 text-xs font-medium text-primary">
                    {tag}
                  </span>
                ))}
              </div>
              <h2 class="mb-2 text-xl font-semibold">
                <a 
                  href={`/projects/${slug}`}
                  class="after:absolute after:inset-0 after:z-0"
                >
                  {project.data.title}
                </a>
              </h2>
              <p class="mb-4 text-sm text-muted-foreground">
                {project.data.startDate && (
                  <time datetime={new Date(project.data.startDate).toISOString()}>
                    {new Date(project.data.startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long' })}
                  </time>
                )}
              </p>
              {excerpt && (
                <p class="mb-4 text-sm text-muted-foreground">
                  {excerpt}
                </p>
              )}
              
              {project.data.links && project.data.links.length > 0 && (
                <div class="mt-auto pt-4">
                  <div class="flex flex-wrap gap-2">
                    {project.data.links.map((link, index) => (
                      <a 
                        key={index}
                        href={link.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
                        onclick="event.stopPropagation()"
                      >
                        {link.label}
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </article>
        );
      })}
    </div>
    
    {/* Empty State */}
    {projects.length === 0 && (
      <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-muted-foreground" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-foreground">No projects found</h3>
        <p class="mt-1 text-sm text-muted-foreground">Check back later for updates.</p>
      </div>
    )}
    
    {/* Filter Script */}
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const filterButtons = document.querySelectorAll('[data-filter]');
        const projects = document.querySelectorAll('#projects-container > article');
        const projectCount = document.getElementById('project-count');
        
        // Update project count
        if (projectCount) {
          projectCount.textContent = projects.length;
        }

        filterButtons.forEach(button => {
          button.addEventListener('click', () => {
            const filter = button.getAttribute('data-filter');
            let visibleCount = 0;
            
            // Update active button styles
            filterButtons.forEach(btn => {
              if (btn === button) {
                btn.classList.remove('bg-muted', 'hover:bg-muted/80');
                btn.classList.add('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');
              } else {
                btn.classList.remove('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');
                btn.classList.add('bg-muted', 'hover:bg-muted/80');
              }
            });
            
            // Filter projects
            projects.forEach(project => {
              const tags = project.getAttribute('data-tags') || '';
              if (filter === 'all' || tags.includes(filter)) {
                project.classList.remove('hidden');
                visibleCount++;
              } else {
                project.classList.add('hidden');
              }
            });
            
            // Update URL without page reload
            const url = new URL(window.location);
            if (filter === 'all') {
              url.searchParams.delete('filter');
            } else {
              url.searchParams.set('filter', filter);
            }
            window.history.pushState({}, '', url);
            
            // Update project count
            if (projectCount) {
              projectCount.textContent = visibleCount;
            }
            
            // Show empty state if no projects match
            const emptyState = document.getElementById('empty-state');
            if (emptyState) {
              if (visibleCount === 0) {
                emptyState.classList.remove('hidden');
              } else {
                emptyState.classList.add('hidden');
              }
            }
          });
        });
        
        // Check for filter in URL on page load
        const urlParams = new URLSearchParams(window.location.search);
        const filterParam = urlParams.get('filter');
        if (filterParam) {
          const button = document.querySelector(`[data-filter="${filterParam}"]`);
          if (button) {
            button.click();
          }
        } else if (filterButtons.length > 0) {
          // Click the 'All' button by default
          filterButtons[0].click();
        }
      });
    </script>
  </div>
</Layout>
