---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Get all services from the content collection
const services = (await getCollection('services')).sort((a, b) => {
  // Sort by featured first, then by title
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return a.data.title.localeCompare(b.data.title);
});

// Get unique tags for filtering
const allTags = Array.from(new Set(services.flatMap(service => service.data.tags || [])));

// Get featured services
const featuredServices = services.filter(service => service.data.featured);

// Function to get slug from service
const getSlug = (service) => service.slug || service.id.replace(/\.[^/.]+$/, '');
---

<Layout 
  title="Our Services" 
  description="Explore our comprehensive range of professional GIS and spatial analysis services to support your research and analysis needs."
>
  <div class="container mx-auto px-4 py-12">
    {/* Hero Section */}
    <div class="text-center mb-16">
      <h1 class="text-4xl md:text-5xl font-bold text-foreground mb-4">
        Our Services
      </h1>
      <p class="text-xl text-muted-foreground max-w-3xl mx-auto">
        Professional GIS and spatial analysis services to support your research, analysis, and decision-making needs.
      </p>
    </div>

    {/* Featured Services */}
    {featuredServices.length > 0 && (
      <section class="mb-16">
        <div class="flex items-center justify-between mb-8">
          <h2 class="text-2xl font-bold text-foreground">Featured Services</h2>
          <span class="px-3 py-1 text-sm rounded-full bg-primary/10 text-primary">
            {featuredServices.length} services
          </span>
        </div>
        
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {featuredServices.map(service => {
            const slug = getSlug(service);
            return (
              <a 
                href={`/services/${slug}`}
                class="group flex flex-col h-full p-6 rounded-xl border border-border hover:border-primary/50 hover:shadow-lg transition-all duration-300"
              >
                {service.data.icon && (
                  <div class="w-12 h-12 flex items-center justify-center bg-primary/10 rounded-xl mb-4 text-primary">
                    <span class="text-2xl" set:html={service.data.icon}></span>
                  </div>
                )}
                <h3 class="text-xl font-semibold text-foreground mb-2">
                  {service.data.title}
                </h3>
                <p class="text-muted-foreground flex-1">
                  {service.data.description}
                </p>
                <div class="mt-4 pt-4 border-t border-border">
                  <span class="inline-flex items-center text-sm font-medium text-primary group-hover:underline">
                    Learn more
                    <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </span>
                </div>
              </a>
            );
          })}
        </div>
      </section>
    )}

    <div class="mb-8">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-900">All Services</h2>
        {allTags.length > 0 && (
          <div class="mt-4 sm:mt-0 flex flex-wrap gap-2">
            <button 
              class="px-4 py-2 rounded-md text-sm font-medium bg-primary text-white"
              data-filter="all"
            >
              All Services
            </button>
            {allTags.map(tag => (
              <button 
                class="px-4 py-2 rounded-md text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200"
                data-filter={tag}
              >
                {tag}
              </button>
            ))}
          </div>
        )}
      </div>

      <div class="space-y-6">
        {services.map(service => (
          <div 
            class="p-6 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
            data-tags={service.data.tags?.join(',') || ''}
                </div>
              )}
              <h3 class="text-lg font-semibold text-foreground mb-2">
                {service.data.title}
              </h3>
              <p class="text-muted-foreground text-sm flex-1">
                {service.data.description}
              </p>
              <div class="mt-4 pt-3 border-t border-border">
                <span class="inline-flex items-center text-sm font-medium text-primary group-hover:underline">
                  Learn more
                  <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </span>
              </div>
            </a>
          );
        })}
      </div>

      {/* Empty State */}
      <div id="empty-state" class="hidden text-center py-12">
        <svg class="mx-auto h-12 w-12 text-muted-foreground" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-foreground">No services found</h3>
        <p class="mt-1 text-sm text-muted-foreground">Try selecting a different filter</p>
      </div>
    </section>
  </div>

  {/* Filter Script */}
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('[data-filter]');
      const serviceItems = document.querySelectorAll('[data-tags]');
      const serviceCount = document.getElementById('service-count');
      const emptyState = document.getElementById('empty-state');
      
      // Update service count
      if (serviceCount) {
        serviceCount.textContent = `${serviceItems.length} services`;
      }

      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const filter = button.getAttribute('data-filter');
          let visibleCount = 0;
          
          // Update active button styles
          filterButtons.forEach(btn => {
            if (btn === button) {
              btn.classList.remove('bg-muted', 'hover:bg-muted/80');
              btn.classList.add('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');
            } else {
              btn.classList.remove('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');
              btn.classList.add('bg-muted', 'hover:bg-muted/80');
            }
          });
          
          // Filter services
          serviceItems.forEach(item => {
            const tags = item.getAttribute('data-tags') || '';
            if (filter === 'all' || tags.includes(filter)) {
              item.classList.remove('hidden');
              visibleCount++;
            } else {
              item.classList.add('hidden');
            }
          });
          
          // Update URL without page reload
          const url = new URL(window.location);
          if (filter === 'all') {
            url.searchParams.delete('filter');
          } else {
            url.searchParams.set('filter', filter);
          }
          window.history.pushState({}, '', url);
          
          // Update service count
          if (serviceCount) {
            serviceCount.textContent = `${visibleCount} service${visibleCount !== 1 ? 's' : ''}`;
          }
          
          // Show/hide empty state
          if (emptyState) {
            if (visibleCount === 0) {
              emptyState.classList.remove('hidden');
            } else {
              emptyState.classList.add('hidden');
            }
          }
        });
      });
      
      // Check for filter in URL on page load
      const urlParams = new URLSearchParams(window.location.search);
      const filterParam = urlParams.get('filter');
      if (filterParam) {
        const button = document.querySelector(`[data-filter="${filterParam}"]`);
        if (button) {
          button.click();
        }
      } else if (filterButtons.length > 0) {
        // Click the 'All' button by default
        filterButtons[0].click();
      }
    });
  </script>
</Layout>
