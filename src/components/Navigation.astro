---
import { Image } from 'astro:assets';
import { mainNav } from '../config/navigation';
import { getImagePath } from '../utils/images';

// Icons
import { ChevronDown, Menu, X } from 'lucide-astro';

const currentPath = Astro.url.pathname;
const logoPath = getImagePath('LOGO_GIS.png');
---

<header class="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
  <div class="container mx-auto px-4">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2">
          <Image
            src={logoPath}
            alt="RCC GIS Logo"
            width={120}
            height={40}
            class="h-10 w-auto"
          />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-1">
        {mainNav.map((item) => (
          <div class="relative group">
            {item.children ? (
              <>
                <button 
                  class={`flex items-center px-3 py-2 text-sm font-medium rounded-md ${
                    currentPath.startsWith(item.href.replace(/\/$/, '')) && item.href !== '/' 
                      ? 'text-primary' 
                      : 'text-foreground/80 hover:text-foreground'
                  }`}
                >
                  <span>{item.label}</span>
                  {item.children && (
                    <ChevronDown class="ml-1 h-4 w-4" />
                  )}
                </button>
                {item.children && (
                  <div class="absolute left-0 mt-1 w-56 origin-top-left rounded-md bg-background shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 ease-in-out z-50">
                    <div class="py-1">
                      {item.children.map((child) => (
                        <a
                          href={child.href}
                          class={`block px-4 py-2 text-sm ${
                            currentPath === child.href
                              ? 'bg-accent text-accent-foreground'
                              : 'text-foreground/80 hover:bg-accent hover:text-accent-foreground'
                          }`}
                        >
                          {child.label}
                        </a>
                      ))}
                    </div>
                  </div>
                )}
              </>
            ) : (
              <a
                href={item.href}
                class={`px-3 py-2 text-sm font-medium rounded-md ${
                  currentPath === item.href
                    ? 'text-primary font-semibold'
                    : 'text-foreground/80 hover:text-foreground'
                }`}
              >
                {item.label}
              </a>
            )}
          </div>
        ))}
      </nav>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button 
          id="mobile-menu-button" 
          class="inline-flex items-center justify-center p-2 rounded-md text-foreground/70 hover:text-foreground hover:bg-muted focus:outline-none"
          aria-label="Open main menu"
        >
          <span class="sr-only">Open main menu</span>
          <Menu id="menu-icon" class="h-6 w-6" />
          <X id="close-icon" class="hidden h-6 w-6" />
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden bg-background border-t">
    <div class="px-2 pt-2 pb-3 space-y-1" x-data="{ openItem: null }">
      {mainNav.map((item, index) => (
        <div class="space-y-1" key={index}>
          {item.children ? (
            <div class="space-y-1">
              <button
                @click="openItem = openItem === index ? null : index"
                class="w-full flex items-center justify-between px-3 py-2 text-base font-medium rounded-md text-foreground/80 hover:text-foreground hover:bg-accent/50"
              >
                <span>{item.label}</span>
                <ChevronDown 
                  class="h-5 w-5 transform transition-transform duration-200"
                  :class="{ 'rotate-180': openItem === index }"
                />
              </button>
              <div x-show="openItem === index" x-collapse class="pl-4 space-y-1">
                {item.children?.map((child) => (
                  <a
                    href={child.href}
                    class={`block px-3 py-2 text-base font-medium rounded-md ${
                      currentPath === child.href
                        ? 'text-primary font-medium'
                        : 'text-foreground/70 hover:text-foreground hover:bg-accent/50'
                    }`}
                  >
                    {child.label}
                  </a>
                ))}
              </div>
            </div>
          ) : (
            <a
              href={item.href}
              class={`block px-3 py-2 text-base font-medium rounded-md ${
                currentPath === item.href
                  ? 'bg-accent text-accent-foreground'
                  : 'text-foreground/80 hover:text-foreground hover:bg-accent/50'
              }`}
            >
              {item.label}
            </a>
          )}
        </div>
      ))}
    </div>
  </div>
</header>

<!-- Mobile menu toggle script -->
<script is:inline>
  document.addEventListener('alpine:init', () => {
    // Mobile menu toggle functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');

    if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
      mobileMenuButton.addEventListener('click', () => {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true' || false;
        mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
        mobileMenu.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
        
        // Toggle body scroll
        document.body.style.overflow = !isExpanded ? 'hidden' : '';
      });
    }
    
    // Close mobile menu when clicking on a link
    const navLinks = document.querySelectorAll('#mobile-menu a');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        document.body.style.overflow = '';
      });
    });
  });
</script>